'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (Rx) {
  return {
    never: function never(source) {
      return source;
    },
    always: function always(source, events, options, args) {
      var params = args[0] || {};
      var query = Object.assign({}, params.query);
      var _super = this._super.bind(this);

      // A function that returns if an item matches the query
      var matches = (0, _utils.matcher)(query);
      // A function that sorts a limits a result (paginated or not)
      var sortAndTrim = (0, _utils2.makeSorter)(query, options);

      return source.concat(source.exhaustMap(function () {
        return Rx.Observable.merge(events.created.filter(matches), events.removed, events.updated, events.patched).flatMap(function () {
          var result = _super.apply(undefined, _toConsumableArray(args));
          var source = Rx.Observable.fromPromise(result);

          return source.map(sortAndTrim);
        });
      }));
    },
    smart: function smart(source, events, options, args) {
      var params = args[0] || {};
      var query = Object.assign({}, params.query);
      // A function that returns if an item matches the query
      var matches = (0, _utils.matcher)(query);
      // A function that sorts a limits a result (paginated or not)
      var sortAndTrim = (0, _utils2.makeSorter)(query, options);

      return source.concat(source.exhaustMap(function (data) {
        return Rx.Observable.merge(events.created.filter(matches).map(function (eventData) {
          return function (items) {
            return items.concat(eventData);
          };
        }), events.removed.map(function (eventData) {
          return function (items) {
            return items.filter(function (current) {
              return eventData[options.idField] !== current[options.idField];
            });
          };
        }), Rx.Observable.merge(events.updated, events.patched).map(function (eventData) {
          return function (items) {
            return items.filter(function (current) {
              return eventData[options.idField] !== current[options.idField];
            }).concat(eventData).filter(matches);
          };
        })).scan(function (current, callback) {
          var isPaginated = !!current[options.dataField];
          if (isPaginated) {
            current[options.dataField] = callback(current.data);
          } else {
            current = callback(current);
          }
          return sortAndTrim(current);
        }, data);
      }));
    }
  };
};

var _utils = require('feathers-commons/lib/utils');

var _utils2 = require('./utils');

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

module.exports = exports['default'];