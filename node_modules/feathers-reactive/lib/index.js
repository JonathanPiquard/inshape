'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _resource = require('./resource');

var _resource2 = _interopRequireDefault(_resource);

var _list = require('./list');

var _list2 = _interopRequireDefault(_list);

var _strategies = require('./strategies');

var _strategies2 = _interopRequireDefault(_strategies);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var debug = require('debug')('feathers-reactive');

function FeathersRx(Rx, options) {
  if (!Rx) {
    throw new Error('You have to pass an instance of RxJS as the first paramter.');
  }

  if (!Rx.Observable) {
    throw new Error('The RxJS instance does not seem to provide an `Observable` type.');
  }

  var listStrategies = (0, _strategies2.default)(Rx);

  options = Object.assign({
    idField: 'id',
    dataField: 'data',
    // Whether to requery service when a change is detected
    listStrategy: 'smart',
    // The merging strategy
    merge: function merge(current, eventData) {
      return Object.assign({}, current, eventData);
    }
  }, options);

  if (typeof options.listStrategy === 'string') {
    options.listStrategy = listStrategies[options.listStrategy];
  }

  var mixin = function mixin(service) {
    var app = this;
    var mixin = {
      rx: function rx() {
        var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

        this._rx = options;
        return this;
      }
    };
    var events = {
      created: Rx.Observable.fromEvent(service, 'created'),
      updated: Rx.Observable.fromEvent(service, 'updated'),
      patched: Rx.Observable.fromEvent(service, 'patched'),
      removed: Rx.Observable.fromEvent(service, 'removed')
    };

    app.methods.forEach(function (method) {
      if (typeof service[method] === 'function') {
        mixin[method] = method === 'find' ? (0, _list2.default)(Rx, events, options) : (0, _resource2.default)(Rx, events, options, method);
      }
    });

    service.mixin(mixin);
  };

  return function () {
    debug('Initializing feathers-reactive plugin');

    this.mixins.push(mixin);
  };
}

FeathersRx.strategy = _strategies2.default;

exports.default = FeathersRx;
module.exports = exports['default'];